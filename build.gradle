group "net.benwoodworth"
version "1.1"

def plugin_name = "CrossPlatformGreeter"
def plugin_description = "A cross-platform server greeter."
def plugin_version = version
def plugin_author = "Kepler_"

apply plugin: "kotlin"
//apply plugin: "org.spongepowered.plugin"

buildscript {
    ext {
        version_kotlin = "1.1.0"
        version_bukkit = "1.10.2-R0.1-SNAPSHOT"
        version_sponge = "4.0.3"
        version_spongegradle = "0.8.1"
        version_dagger = "2.9"
        version_jsr250 = "1.0"
        version_javax_inject = "1"
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "gradle.plugin.org.spongepowered:spongegradle:$version_spongegradle"
    }
}

repositories {
    mavenCentral()
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "http://repo.spongepowered.org/maven" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-runtime:$version_kotlin"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"

    compile "org.bukkit:bukkit:$version_bukkit"
    compile "org.spongepowered:spongeapi:$version_sponge"

    compile "javax.annotation:jsr250-api:$version_jsr250"
    compile "javax.inject:javax.inject:$version_javax_inject"
    compile "com.google.dagger:dagger:$version_dagger"
    kapt "com.google.dagger:dagger-compiler:$version_dagger"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        expand plugin_name: plugin_name,
                plugin_author: plugin_author,
                plugin_description: plugin_description,
                plugin_version: plugin_version

        include "plugin.yml"
    }
}

// Generate Dagger 2 classes, and include them in the java source set
sourceSets.main.java.srcDirs += "$buildDir/generated/source/kapt/main"
kapt.generateStubs = true

jar.from {
    String[] includeInJar = [
            "kotlin-runtime-${version_kotlin}.jar",
            "kotlin-stdlib-${version_kotlin}.jar",
            "dagger-${version_dagger}.jar",
            "javax.inject-${version_javax_inject}.jar"
    ]

    configurations.compile
            .findAll { includeInJar.contains(it.name) }
            .collect { it.isDirectory() ? it : zipTree(it) }
}
